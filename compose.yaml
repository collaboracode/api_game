version: "3.1"
volumes:
  data:
  app_node_modules:
  app:
services:
  app:
    # build: ./
    # command: npm start
    # ports:
    # - '3000:3000'
 
    container_name: app
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    ports:
      - "3000:3000"
    volumes:
      - app:/app
      - app_node_modules:/app/node_modules
    depends_on:
    - mongo
    - postgres
    develop:
      watch:
        - action: rebuild
          path: ./**/*

        # - action: sync
        #   path: 
        #   target: /**/*
        #   ignore:
        #     - node_modules/
        # - action: rebuild
        #   path: package.json
  mongo:
    image: mongo
    restart: always
    container_name: mongo
    ports:
      - '27017:27017'
    logging:
      options:
        max-size: 1g
    volumes:
      - ./db/db_data/:/db/
    # environment:
      # MONGO_INITDB_ROOT_USERNAME: user
      # MONGO_INITDB_ROOT_PASSWORD: password
  postgres:
    # image: postgres:14.1-alpine
    image: 'postgres:latest'

    restart: always
    container_name: postgres-container
    environment:
      PGUSER: postgres
      POSTGRES_USER: postgres # The PostgreSQL user (useful to connect to the database)
      # POSTGRES_HOST: postgres 
      POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
      # POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_HOST_AUTH_METHOD: trust
      # POSTGRES_INITDB_ARGS: --auth=scram-sha-25
      POSTGRES_DB: users
    # environment:
    #   POSTGRES_USER: postgres # The PostgreSQL user (useful to connect to the database)
    #   POSTGRES_PASSWORD: password # The PostgreSQL password (useful to connect to the database)
    #   POSTGRES_DB: users
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - data:/var/lib/postgresql/data```
      - ./db/init:/docker-entrypoint-initdb.d
